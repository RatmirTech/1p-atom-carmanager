// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _1p_atom_carmanager.backend.core.Entities;

#nullable disable

namespace _1p_atom_carmanager.backend.core.Migrations
{
    [DbContext(typeof(ContextDb))]
    [Migration("20230918164335_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("_1p_atom_carmanager.backend.core.Entities.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AcceleratorPedalPosition")
                        .HasColumnType("float");

                    b.Property<bool>("BrakeSwitch")
                        .HasColumnType("bit");

                    b.Property<Guid>("CarTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ClutchSwitch")
                        .HasColumnType("bit");

                    b.Property<bool>("CruiseControl")
                        .HasColumnType("bit");

                    b.Property<double>("EngineCoolantTemperature")
                        .HasColumnType("float");

                    b.Property<double>("EngineSpeed")
                        .HasColumnType("float");

                    b.Property<string>("FMSStandardSoftwareVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("FuelLevel")
                        .HasColumnType("real");

                    b.Property<double>("GrossAxleWeightRating")
                        .HasColumnType("float");

                    b.Property<double>("HighResolutionVehicleDistance")
                        .HasColumnType("float");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PTOStatusMode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ServiceDistance")
                        .HasColumnType("float");

                    b.Property<Guid>("TachographInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalEngineHours")
                        .HasColumnType("float");

                    b.Property<double>("TotalFuelUsed")
                        .HasColumnType("float");

                    b.Property<string>("VehicleIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("VehicleImprovement")
                        .HasColumnType("float");

                    b.Property<double>("VehicleSpeedFromTachograph")
                        .HasColumnType("float");

                    b.Property<double>("VehicleSpeedWheelBased")
                        .HasColumnType("float");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CarTypeId");

                    b.HasIndex("TachographInformationId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("_1p_atom_carmanager.backend.core.Entities.CarType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarTypes");
                });

            modelBuilder.Entity("_1p_atom_carmanager.backend.core.Entities.TachographInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DistanceTraveled")
                        .HasColumnType("float");

                    b.Property<float>("Rpm")
                        .HasColumnType("real");

                    b.Property<double>("VehicleSpeed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("TachographInfos");
                });

            modelBuilder.Entity("_1p_atom_carmanager.backend.core.Entities.Car", b =>
                {
                    b.HasOne("_1p_atom_carmanager.backend.core.Entities.CarType", "CarType")
                        .WithMany()
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_1p_atom_carmanager.backend.core.Entities.TachographInfo", "TachographInformation")
                        .WithMany()
                        .HasForeignKey("TachographInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarType");

                    b.Navigation("TachographInformation");
                });
#pragma warning restore 612, 618
        }
    }
}
